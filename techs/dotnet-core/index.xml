<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dotnet Core on A6k</title><link>https://a6k.dev/techs/dotnet-core/</link><description>Recent content in Dotnet Core on A6k</description><generator>Hugo 0.125.0</generator><language>en-gb</language><copyright>© A6k</copyright><lastBuildDate>Tue, 11 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://a6k.dev/techs/dotnet-core/index.xml" rel="self" type="application/rss+xml"/><item><title>Insync Group</title><link>https://a6k.dev/cv/insync/</link><pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate><guid>https://a6k.dev/cv/insync/</guid><description>Accounting and Tax services for the self-employed.
Adding features for identifying fees for Channel Partners.
System is self hosted with dotnet for UI, APIs and message bus.
Currently built with .Net Framework. I built packages in netstandard and net6 to replace/modernise parts of the platform while keeping a level of source code compatibility to make migration possible.</description></item><item><title>NFER</title><link>https://a6k.dev/cv/nfer/</link><pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate><guid>https://a6k.dev/cv/nfer/</guid><description>Building an E-Assessment system.
Management of Pupil &amp;amp; Establishment details and integration of the web based test taking system where Pupils are assessed.
Help move project towards a more &amp;ldquo;micro-services&amp;rdquo; based approach.
Built the module that takes the Test details, the responses of the Pupil, together with an inhouse set of rules to assess the responses to mark and assign scores.
Integrated with systems both up and downstream.
Initial work on improving devops pipelines and deployments to k8s.</description></item><item><title>Medivet</title><link>https://a6k.dev/cv/medivet/</link><pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate><guid>https://a6k.dev/cv/medivet/</guid><description>Develop a new web based application to support the running and management of veterinary practices. The current system has reached its scaling limit and a new system is required to support business growth.
Written from the ground up with a micro-services style in C# with dotnet 5.0 in the backend to support Angular with ngRx in the browser. Using SignalR (websockets) as the primary &amp;ldquo;api&amp;rdquo; transport and a message bus to provide a scalable, realtime feel to the app.</description></item><item><title>Game</title><link>https://a6k.dev/cv/game/</link><pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate><guid>https://a6k.dev/cv/game/</guid><description>Micro-services integrating legacy systems (JDA, WebSphere) with new Product Information Management system (Akeneo, Algolia).
CSharp in dotnetcore, with docker, Kafka.
Created build system with Bitbucket/Bamboo. Ensured consistency, testing, versioning across all libraries and services.
Created app framework to simplify creation of services (logging, metrics, config etc) and producing/consuming events on Kafka and IBM MQ.</description></item><item><title>GfK</title><link>https://a6k.dev/cv/gfk/</link><pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate><guid>https://a6k.dev/cv/gfk/</guid><description>Scans sources for pricing information. Data is normalised, translated, aggregated into data stores with api’s and a web ui. Clients can then track actual selling prices of their products or competitor pricing policies.
Processing via a messaging platform. Migration to dotnet Core, Linux containers, Kubernetes, Kafka. I worked across the system. Also created frameworks to ease creation of services and api’s, applying standards and cross cutting concerns.
AWS, net46+, dotnetCore, RabbitMQ, Kafka, ElasticSearch, Api’s, caching, messaging, vsts, git, docker, kubernetes, helm</description></item><item><title>Codit/SwissRe</title><link>https://a6k.dev/cv/codit/</link><pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate><guid>https://a6k.dev/cv/codit/</guid><description>Uses authoritative sources to monitor events such as earthquakes and cyclones to automatically payout when the event matches the policy criteria. no human in the loop.
As a team member I worked on many parts of the system: api&amp;rsquo;s; message handlers; catastrophe impact calculation; policy processing; automated testing; deployment pipelines …
Azure, net46+, dotnetCore, ServiceBus, AppServices, LogicApps, Api’s, caching, messaging, vsts, git</description></item></channel></rss>